---
title: Process your build
---

<ul class="main-content--version">
  <li>Current version:</li>
  <li><a href="/tutorials/sample-app/mac/process-build">Mac</a></li>
  <li><a class="active" href="/tutorials/sample-app/linux/process-build">Linux</a></li>
  <li><a href="/tutorials/sample-app/windows/process-build">Windows</a></li>
</ul>
<hr />

# Run your service
<%= partial "/shared/process_build_common" %>

## Run natively
Before we can run our service, we need to rebuild our package to include the changes made in the previous two steps.

1. If you are not in the studio environment, change over to your plan directory and enter the studio.

        $ cd ~/habitat-example-plans/myrailsapp
        $ hab studio enter

2. Build your myrailsapp package.

        [1][default:/src:0]# build

   > Note: When you created an origin key pair in `hab setup`, you were also asked if you wanted to setup a default origin. If you said yes, then the `HAB_ORIGIN` environment variable is overridden for you with the default origin name you created. This action will also import the secret origin key that matches the overridden origin name when you call `hab studio enter`.

3. Because the studio is running natively in Linux, you can run your package from within the studio for quick testing purposes.

        [2][default:/src:0]# hab start myorigin/myrailsapp

    You should see the supervisor start your Node.js application.

       hab-sup(MR): Supervisor Member-ID 013f00cc50f4414ebdb419e05eeebf3a
       hab-sup(MR): Starting myorigin/myrailsapp
       hab-sup(MR): Starting gossip-listener on 0.0.0.0:9638
       hab-sup(MR): Starting http-gateway on 0.0.0.0:9631
       myrailsapp.default(SR): Hooks recompiled
       myrailsapp.default(SR): Initializing
       myrailsapp.default(SV): Starting process as user=hab, group=hab
       myrailsapp.default(O): Running on http://0.0.0.0:8080

4. Connect to the Node.js app through your <a href="http://localhost:8080" target="_blank">localhost</a>.

    Here's an example of what you should see in your browser:

    ![Screen shot of node.js tutorial output](/images/nodejs-tutorial-output-linux.png)

5. You can also update the message value when your Habitat service starts up. To do this, you must pass in an
environment variable with the following format: `HAB_PACKAGENAME='keyname1=newvalue1 keyname2=newvalue2'`. For
multiline environment variables, such as those in a TOML table, it's preferrable to place your changes in a .toml
file and pass it in using `HAB_PACKAGENAME="$(cat foo.toml)"`.

    > Note: The package name in the environment variable must be uppercase, any dashes must be replaced with underscores, and if you are overriding values in a TOML table, you must override all values in the table.

    Here is how you change the message for myrailsapp:

       [3][default:/src:0]# HAB_myrailsapp='message = "Habitat rocks!"' hab start myorigin/myrailsapp

    Now refresh, or connect again to the local URL through your web browser.

    ![Screen shot of node.js output with new message](/images/nodejs-tutorial-update-output-linux.png)

### Run services outside of the studio
As mentioned above, running services from within the studio is great for testing purposes, but in a real deployment scenario, packages will be downloaded, installed, and then run outside of a studio environment.

To natively run services on your Linux host machine, do the following:

1. Build your package in the studio and then exit back to your host machine.
2. Add the `hab` user and group to your machine. This is the default user and group for the child process in a service and they must be present for your service to run.

       $ sudo groupadd hab
       $ sudo useradd -g hab hab

   > Note: One of the reasons you can run a service from within the studio is that the `hab` user is created for you when you enter the studio environment.

3. Export the origin public key you created during `hab setup` and pipe the output into the `hab origin key import` subcommand. This will place the public key in the global keys cache on your machine. Before a package can be installed, the public key for that package must either be downloaded from a depot or placed in the correct cache location manually. The public key is then used to verify the integrity of the package.

       $hab origin key export myorigin --type public | sudo hab origin key import

4. Run `sudo hab install path/to/results/packagefilename.hart`. This will install your package in the same location on the host machine as it does in the studio (i.e. `/hab/pkgs`). Make sure you are in the
`results` directory of `myrailsapp` and the install the package.

       $ cd ~/habitat-example-plans/myrailsapp/results
       $ sudo hab install myorigin-myrailsapp-0.2.0-20160902224802-x86_64-linux.hart

5. Run `sudo hab start origin/packagename`.

       $ sudo hab start myorigin/myrailsapp

   You can now connect to the Node.js app as you did earlier when running the service in the studio environment.

## (Optional) Run in a Docker container
To show the portability of Habitat, you can also export and run a Habitat service from within a Docker container through the following steps:

1. If your Linux distribution does not have the Docker engine installed, see [Install Docker Engine](https://docs.docker.com/engine/installation/) for the installation instructions.

2. Re-enter the studio.

       $ cd ~/habitat-example-plans/myrailsapp
       $ hab studio enter
       [1][default:/src:0]#

3. Create a Docker image containing your package by running `hab pkg export docker origin/packagename` with the origin and name of your package.

       [2][default:/src:0]# hab pkg export docker myorigin/myrailsapp

    Habitat will proceed to unpack and install all necessary Habitat packages, including a Habitat supervisor, the myrailsapp package, and all of its runtime dependencies. Then it will create an image using the Docker scratch image as the base and build up the rest of the image from there.

4. Once that process has completed, exit out of the studio and run a Docker container from any terminal window that has access to the Docker CLI on your host machine.

    > Note: We have to publish the Docker container port number to allow that container to be accessed by the host machine. Also, if you have not added your user to the `Docker` group, you will have to run `docker` with root privileges.

       $ docker run -it -p 8080:8080 myorigin/myrailsapp

    You should see the supervisor start your Node.js application.

5. Because we are running this service in a Docker container on our host machine, connect to the Node.js app through the exposed container port on your <a href="http://localhost:8080" target="_blank">localhost</a>.

6. Just like when running a service natively, you can also re-run your Docker container and update the message value when your Habitat service starts up. To do this, pass in environment variables in the same manner as you did earlier.

       $ docker run -e HAB_myrailsapp='message="Habitat rocks!"' -p 8080:8080 -it myorigin/myrailsapp

Congratulations, you have successfully built a package from scratch, run it locally, and tested out some of the configuration capabilities!

<hr>
<ul class="main-content--button-nav">
  <li><a href="/tutorials/sample-app/next-steps" class="button cta">Next Steps</a></li>
  <li><a href="/tutorials/sample-app/linux/configure-plan/">Back to previous step</a></li>
</ul>
